# # Dockerfile

# # ==== CONFIGURE =====
# # Use a Node 16 base image
# FROM node:16-alpine
# # Set the working directory to /app inside the container
# WORKDIR /src/Services/UI
# # Copy app files
# COPY . .
# # ==== BUILD =====
# # Install dependencies (npm ci makes sure the exact versions in the lockfile gets installed)
# RUN npm install 
# RUN npm install -g serve
# # Build the app
# RUN npm run build
# # ==== RUN =======
# # Set the env to "production"
# ENV NODE_ENV production
# # Expose the port on which the app will be running (3000 is the default that `serve` uses)
# EXPOSE 3000
# #EXPOSE 443
# # Start the app
# CMD [ "npm", "serve", "build" ]

# pull official base image
# FROM node:16-alpine

# # set working directory
# #WORKDIR /app
# WORKDIR /src/Services/ui

# # add `/app/node_modules/.bin` to $PATH
# #ENV PATH /src/Services/ui/node_modules/.bin:$PATH
# ENV PATH /src/Services/ui/node_modules/.bin:$PATH

# # Expose the port on which the app will be running (3000 is the default that `serve` uses)
# EXPOSE 3000

# # install app dependencies
# COPY package.json ./
# #COPY package-lock.json ./
# RUN npm install --silent
# RUN npm install react-scripts@latest -g --silent

# # add app
# COPY . ./

# # start app
# CMD ["npm", "start"]

# You should always specify a full version here to ensure all of your developers
# are running the same version of Node.
# FROM node:16-alpine

# # The base node image sets a very verbose log level.
# ENV NPM_CONFIG_LOGLEVEL warn

# # Copy all local files into the image.
# COPY . .

# # install react script
# RUN npm install --silent
# RUN npm install react-scripts@latest -g --silent
# # Build for production.
# RUN npm run build  --production 

# # Install `serve` to run the application.
# RUN npm install -g serve

# # Set the command to start the node server.
# CMD serve -s -n build

# # Tell Docker about the port we'll run on.
# EXPOSE 3000

# Stage 0, "build-stage", based on Node.js, to build and compile the frontend
# FROM node:16-alpine as build-stage

# WORKDIR /src/Services/ui

# COPY package*.json /src/Services/ui

# RUN npm install

# COPY . .

# # RUN CI=true npm test

# RUN npm run build


# # Stage 1, based on Nginx, to have only the compiled app, ready for production with Nginx
# FROM nginx:1.15

# COPY --from=build-stage /src/Services/ui/build/ /usr/share/nginx/html

# # Copy the default nginx.conf provided by tiangolo/node-frontend
# COPY --from=build-stage ./nginx.conf /etc/nginx/conf.d/default.conf


# Multi-stage
# 1) Node image for building frontend assets
# 2) nginx stage to serve frontend assets

# Name the node stage "builder"
FROM  node:16-alpine AS builder
# Set working directory
WORKDIR /UI
# Copy all files from current directory to working dir in image
COPY UI/ /UI
# install node modules and build assets
RUN npm install
RUN npm run build

# nginx state for serving content
FROM nginx:alpine
# Set working directory to nginx asset directory
WORKDIR /usr/share/nginx/html
# Remove default nginx static assets
RUN rm -rf ./*
# Copy static assets from builder stage
COPY --from=builder /src/Services/ui/build .
# Containers run nginx with global directives and daemon off
ENTRYPOINT ["nginx", "-g", "daemon off;"]